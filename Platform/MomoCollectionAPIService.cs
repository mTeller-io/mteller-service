using Microsoft.Extensions.Configuration;
using Platform.Interface;
using Platform.Model;

namespace Platform
{
    public class MomoCollectionAPIService : IMomoCollectionAPIService
    {
        private readonly IAPIAdapter _apiAdaptor;
        private readonly IConfiguration _configuration;
        public MomoAPIDisbursementConfig? MomoAPIDisbursementConfig { get; private set; }
        public MomoAPICollectionConfig? _momoAPICollectionConfig { get; private set; }

        public MomoCollectionAPIService(IConfiguration configuration)
        {
            _configuration = configuration;

            _momoAPICollectionConfig = _configuration.GetSection(MomoAPICollectionConfig.ConfigKey)
                                                    .Get<MomoAPICollectionConfig>();
            //RestClient _restClient = new RestClient(_momoAPICollectionConfig.BaseUrl);

            _apiAdaptor = new APIAdapter(_momoAPICollectionConfig.APIUser,
            _momoAPICollectionConfig.APIKey, _momoAPICollectionConfig.BaseUrl, _momoAPICollectionConfig.TokenEndpoint,
            _momoAPICollectionConfig.SubscriptionHeaderKeyName, _momoAPICollectionConfig.PrimarySubscriptionKey);
        }

        /// <summary>
        /// This method gets the auth token
        /// </summary>
        /// <param name="subscriptionType">The type of subscription (disbursement, collection, remittance)</param>
        /// <returns>Returns an auth token</returns>
        public static string GenerateToken(string subscriptionType)
        {
            // var client = new RestClient($"{endpoint}/{subscriptionType}/token/")
            // {
            //     Timeout = -1
            // };

            // var request = new RestRequest(Method.POST);
            // request.AddHeader("Ocp-Apim-Subscription-Key", subscriptionKey);
            // request.AddHeader("Authorization", "Basic N2YyZjllY2UtMjNlZC00OWRlLWFiNDgtYmNhODY3M2M0NDAzOjkwZmExYjc0MjI5YjRjYmZhNjQ1ODg0M2MzZjBiZWRk");
            // IRestResponse response = client.Execute(request);
            // return response.Content;
            return String.Empty;
        }

        /// <summary>
        /// This method send a request for payment to the API
        /// </summary>
        /// <param name="token">The access token used for auth in the API</param>
        /// <param name="amount">The amount of money the user wishes to request</param>
        /// <param name="currency">The type of currency to be use (EUR only in API mode)</param>
        /// <param name="externalId">The phone number of the receipient</param>
        /// <param name="partyId">The phone number of the account holder</param>
        /// <param name="paymentMsg">Any additional comment the user wishes to input</param>
        /// <returns>Returns a request to pay provisioning response</returns>

        public async Task<bool> CreateRequestToPay(string token, string amount, string currency, string externalId, string partyId, string partyIdType, string paymentMsg)
        {
            //Prepare headers
            var xreferenceId = Guid.NewGuid();

            var requestHeaders = new Dictionary<string, string>
            {
                //Adding headers
                { _momoAPICollectionConfig!.ReferenceIdHeaderKeyName, xreferenceId.ToString() },
                { _momoAPICollectionConfig!.TargetEnvironmentHeaderKeyName, _momoAPICollectionConfig!.TargetEnvironment },
                { _momoAPICollectionConfig!.SubscriptionHeaderKeyName, _momoAPICollectionConfig!.PrimarySubscriptionKey }
            };

            //requestHeaders.Add("Authorization", $"Bearer {token}");
            //Prepare request body
            var requestJsonBody = new
            {
                amount,
                currency,
                externalId,
                payer = new { partyIdType, partyId },
                payerMessage = paymentMsg,
                payeeNote = paymentMsg
            };

            // var body = @"{" + "\n" +
            // @$"  ""amount"": ""{amount}""," + "\n" +
            // @$"  ""currency"": ""{currency}""," + "\n" +
            // @$"  ""externalId"": ""{externalId}""," + "\n" +
            // @"  ""payer"": {" + "\n" +
            // @"    ""partyIdType"": ""{{accountHolderIdTypeCaseUp}}""," + "\n" +
            // @$"    ""partyId"": ""{partyId}""" + "\n" +
            // @"  }," + "\n" +
            // @$"  ""payerMessage"": ""{paymentMsg}""," + "\n" +
            // @$"  ""payeeNote"": ""{paymentMsg}""" + "\n" +
            // @"}";

            //make request
            var response = await _apiAdaptor.ExecutePostAsync(_momoAPICollectionConfig.RequestToPayEndPoint, requestJsonBody, requestHeaders);

            return response.IsSuccessful;
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="paymentXreferenceId">A UUID generated by user to track the payment provisioned resource</param>
        /// <param name="token">The access token used for auth in the API</param>
        /// <returns>Returns a request to pay data</returns>
        public async Task<string?> GetRequestToPay(string paymentXreferenceId, string token)
        {
            var routeParams = new Dictionary<string, string>();

            //requestHeaders.Add("Authorization", $"Bearer {token}");

            var requestHeaders = new Dictionary<string, string>();
            routeParams.Add(_momoAPICollectionConfig!.ReferenceIdHeaderKeyName, paymentXreferenceId);
            requestHeaders.Add(_momoAPICollectionConfig!.TargetEnvironmentHeaderKeyName, _momoAPICollectionConfig!.TargetEnvironment);
            requestHeaders.Add(_momoAPICollectionConfig!.SubscriptionHeaderKeyName, _momoAPICollectionConfig!.PrimarySubscriptionKey);

            var response = await _apiAdaptor.ExecuteGetAsync(_momoAPICollectionConfig.RequestToPayStatusEndPoint, requestHeaders, null, routeParams);

            return response.Content;
        }

        /// <summary>
        /// This method gets the account balance of the account of the subscription
        /// </summary>
        /// <returns>Returns the account balance</returns>
        public async Task<string?> GetAccountBalance()
        {
            //prepare  headers
            var requestHeaders = new Dictionary<string, string>
            {
                { _momoAPICollectionConfig!.TargetEnvironmentHeaderKeyName, _momoAPICollectionConfig!.TargetEnvironment },
                { _momoAPICollectionConfig!.SubscriptionHeaderKeyName, _momoAPICollectionConfig!.PrimarySubscriptionKey }
            };

            var response = await _apiAdaptor.ExecuteGetAsync(_momoAPICollectionConfig.AccountBalanceEndPoint, requestHeaders, null, null);

            return response.Content;
        }

        /// <summary>
        /// This method gets the account holders active status
        /// </summary>
        /// <param name="partyID">The customer number or Id</param>
        /// <returns>Returns the status of the momo account which holds a subscription</returns>

        public async Task<bool> GetAccountHolderActiveStatus(string partyID)
        {
            // var client = new RestClient($"{endpoint}/{subscriptionType}/v1_0/accountholder/{{accountHolderIdTypeCaseDown}}/{partyID}/active")
            // {
            //     Timeout = -1
            // };

            var routeParams = new Dictionary<string, string>();
            var requestHeaders = new Dictionary<string, string>();
            routeParams.Add(_momoAPICollectionConfig!.AccountHolderIdHeaderKeyName, partyID);
            requestHeaders.Add(_momoAPICollectionConfig!.TargetEnvironmentHeaderKeyName, _momoAPICollectionConfig!.TargetEnvironment);
            requestHeaders.Add(_momoAPICollectionConfig!.SubscriptionHeaderKeyName, _momoAPICollectionConfig!.PrimarySubscriptionKey);

            var response = await _apiAdaptor.ExecuteGetAsync(_momoAPICollectionConfig.AccountHolderActiveStatusEndPoint, requestHeaders, null, routeParams);

            return response.IsSuccessful;
        }

        /// <summary>
        /// Makes a call to get the account holders basic information
        /// </summary>
        /// <param name="partyID">The phone number of the account holder</param>
        /// <returns>Returns the account holders basic information</returns>
        public async Task<string?> GetAccountHolderBaseInfo(string subscriptionType, string partyID, string token)
        {
            var routeParams = new Dictionary<string, string>();
            var requestHeaders = new Dictionary<string, string>();
            routeParams.Add(_momoAPICollectionConfig!.AccountHolderIdHeaderKeyName, partyID);
            requestHeaders.Add(_momoAPICollectionConfig!.TargetEnvironmentHeaderKeyName, _momoAPICollectionConfig!.TargetEnvironment);
            requestHeaders.Add(_momoAPICollectionConfig!.SubscriptionHeaderKeyName, _momoAPICollectionConfig!.PrimarySubscriptionKey);

            var response = await _apiAdaptor.ExecuteGetAsync(_momoAPICollectionConfig.AccountHolderBasicInfoEndPoint, requestHeaders, null, routeParams);

            return response.Content;
        }
    }
}